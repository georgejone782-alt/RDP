name: RDP
on:
  workflow_dispatch:

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 3600

    steps:
      - name: Configure Core RDP Settings
        shell: powershell
        run: |
          # Enable Remote Desktop and disable Network Level Authentication (if needed)
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' `
                             -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                             -Name "UserAuthentication" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                             -Name "SecurityLayer" -Value 0 -Force

          # Remove any existing firewall rule with the same name to avoid duplication
          netsh advfirewall firewall delete rule name="RDP-Tailscale" -ErrorAction SilentlyContinue

          # Allow incoming connections on port 3389 for testing
          netsh advfirewall firewall add rule name="RDP-Tailscale" `
             dir=in action=allow protocol=TCP localport=3389

          # Restart the Remote Desktop service to ensure changes take effect
          Restart-Service -Name TermService -Force

      - name: Create RDP User with Fixed Password
        shell: powershell
        run: |
          # الثابت الذي طلبته (يلبي متطلبات التعقيد والطول)
          $password = 'Yahia@2yahiA112'
          $securePass = ConvertTo-SecureString $password -AsPlainText -Force

          # إذا كان المستخدم موجودًا نحدّث كلمة المرور، وإلا ننشئه
          if (Get-LocalUser -Name "RDP" -ErrorAction SilentlyContinue) {
              try {
                  Set-LocalUser -Name "RDP" -Password $securePass -ErrorAction Stop
              } catch {
                  Write-Host "Unable to set password for existing user 'RDP': $_"
                  exit 1
              }
          } else {
              try {
                  New-LocalUser -Name "RDP" -Password $securePass -AccountNeverExpires -ErrorAction Stop
              } catch {
                  Write-Host "Failed to create user 'RDP': $_"
                  exit 1
              }
          }

          # تأكد من العضويات المطلوبة (تجاهل إذا كان موجودًا)
          try { Add-LocalGroupMember -Group "Administrators" -Member "RDP" -ErrorAction SilentlyContinue } catch {}
          try { Add-LocalGroupMember -Group "Remote Desktop Users" -Member "RDP" -ErrorAction SilentlyContinue } catch {}

          # احفظ الاعتماديات لخطوات لاحقة (ملاحظة: سيبقى النص واضحاً في env إذا لم تستخدم secrets)
          Add-Content -Path $env:GITHUB_ENV -Value "RDP_CREDS=User: RDP | Password: $password"

          if (-not (Get-LocalUser -Name "RDP" -ErrorAction SilentlyContinue)) {
              Write-Error "User creation failed"
              exit 1
          }

      - name: Install Tailscale
        shell: powershell
        run: |
          $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi"
          $installerPath = "$env:TEMP\tailscale.msi"
          Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath
          Start-Process msiexec.exe -ArgumentList "/i", "`"$installerPath`"", "/quiet", "/norestart" -Wait
          Remove-Item $installerPath -Force

      - name: Establish Tailscale Connection
        shell: powershell
        env:
          TAILSCALE_AUTH_KEY: ${{ secrets.TAILSCALE_AUTH_KEY }}
        run: |
          # Bring up Tailscale with the provided auth key and set a unique hostname
          & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey=$env:TAILSCALE_AUTH_KEY --hostname=gh-runner-$env:GITHUB_RUN_ID

          # Wait for Tailscale to assign an IPv4 address
          $tsIP = $null
          $retries = 0
          while (-not $tsIP -and $retries -lt 20) {
              $tsIP = (& "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4) -join ''
              if ($tsIP) { break }
              Start-Sleep -Seconds 3
              $retries++
          }

          if (-not $tsIP) {
              Write-Error "Tailscale IP not assigned. Exiting."
              exit 1
          }

          # Export the Tailscale IP for later steps
          Add-Content -Path $env:GITHUB_ENV -Value "TAILSCALE_IP=$tsIP"

      - name: Verify RDP Accessibility
        shell: powershell
        run: |
          Write-Host "Tailscale IP: $env:TAILSCALE_IP"
          # Test connectivity using Test-NetConnection against the Tailscale IP on port 3389
          $testResult = Test-NetConnection -ComputerName $env:TAILSCALE_IP -Port 3389 -WarningAction SilentlyContinue
          if (-not $testResult.TcpTestSucceeded) {
              Write-Error "TCP connection to RDP port 3389 failed"
              exit 1
          }
          Write-Host "TCP connectivity to RDP port 3389 successful!"

      - name: Maintain Connection
        shell: powershell
        run: |
          Write-Host "`n=== RDP ACCESS ==="
          Write-Host "Address: $env:TAILSCALE_IP"
          Write-Host "Username: RDP"
          # عرض الاعتماديات المخزنة في GITHUB_ENV
          Write-Host "Password: $(Get-Content $env:GITHUB_ENV | Select-String 'RDP_CREDS' -SimpleMatch)"
          Write-Host "==================`n"

          # Keep runner active indefinitely (or until manually cancelled)
          while ($true) {
              Write-Host "[$(Get-Date)] RDP Active - Use Ctrl+C in workflow to terminate"
              Start-Sleep -Seconds 300
          }
